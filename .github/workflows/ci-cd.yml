name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'

env:
  DOCKER_IMAGE: twonose/flask-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Get branch name
      id: branch_name
      run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ steps.branch_name.outputs.branch }}
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

    - name: Set up Minikube
      uses: medyagh/setup-minikube@master

    - name: Update deployment file
      run: |
        # Update image tag in deployment.yml
        sed -i 's|twonose/flask-app:latest|${{ env.DOCKER_IMAGE }}:${{ github.sha }}|' kubernetes/deployment.yml
        
        # Show the changes
        cat kubernetes/deployment.yml

    - name: Deploy to Minikube
      run: |
        set -e # Exit on error

        # Apply Kubernetes configurations
        kubectl apply -f kubernetes/persistent-volume.yml
        kubectl apply -f kubernetes/deployment.yml
        kubectl apply -f kubernetes/service.yml
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=flask-app --timeout=300s
        
        # Get service URL
        minikube service flask-service --url

    - name: Verify Deployment
      timeout-minutes: 5
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Get service URL
        SERVICE_URL=$(minikube service flask-service --url)
        
        # Check if the homepage is accessible
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL)
        if [ "$RESPONSE" = "200" ]; then
          echo "Homepage is accessible"
        else
          echo "Homepage is not accessible. HTTP response code: $RESPONSE"
          exit 1
        fi
        
        # Check Redis connection
        REDIS_CHECK=$(curl -s $SERVICE_URL/test-redis)
        if [[ $REDIS_CHECK == *"success"* ]]; then
          echo "Redis connection successful"
        else
          echo "Redis connection failed"
          exit 1
        fi

    - name: Upload Kubernetes files
      uses: actions/upload-artifact@v2
      with:
        name: kubernetes-files-${{ steps.branch_name.outputs.branch }}
        path: |
          kubernetes/deployment.yml
          kubernetes/service.yml
          kubernetes/persistent-volume.yml

    - name: Clean up
      if: always()
      run: |
        minikube delete